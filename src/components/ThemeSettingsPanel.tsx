import React, { useContext } from "react";
import {
  Drawer,
  Box,
  Typography,
  IconButton,
  TextField,
  Slider,
  InputAdornment,
} from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import { MyCustomThemeContext } from "../themeContexts/MyCustomThemeContext"; // –Ü–º–ø–æ—Ä—Ç –≤–∞—à–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É

interface ThemeSettingsPanelProps {
  open: boolean;
  onClose: () => void;
}

const ThemeSettingsPanel: React.FC<ThemeSettingsPanelProps> = ({
  open,
  onClose,
}) => {
  // –î–æ—Å—Ç—É–ø –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç–µ–º–∏
  const context = useContext(MyCustomThemeContext);
  if (!context) {
    // –í–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ–∑–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º)
    throw new Error('ThemeSettingsPanel –º–∞—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ MyCustomThemeProvider');
  }
  // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è buttonConfig —Ç–∞ updateButtonConfig –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  const { buttonConfig, updateButtonConfig } = context;

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∑–º—ñ–Ω–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π —Å—Ç–∏–ª—é –∫–Ω–æ–ø–∫–∏
  const handleColorChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    updateButtonConfig({ backgroundColor: e.target.value });
  };

  const handleTextColorChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    updateButtonConfig({ textColor: e.target.value });
  };

  const handleHoverColorChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    updateButtonConfig({ hoverColor: e.target.value });
  };

  const handleBorderRadiusChange = (e: Event, newValue: number | number[]) => {
    // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ newValue —î —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ
    if (typeof newValue === 'number') {
      updateButtonConfig({ borderRadius: `${newValue}px` });
    }
  };

  const handlePaddingChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    updateButtonConfig({ padding: e.target.value });
  };

  const handleFontSizeChange = (e: Event, newValue: number | number[]) => {
    // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ newValue —î —á–∏—Å–ª–æ–º –¥–ª—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ
    if (typeof newValue === 'number') {
      updateButtonConfig({ fontSize: `${newValue}rem` });
    }
  };

  const handleBoxShadowChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    updateButtonConfig({ boxShadow: e.target.value });
  };

  return (
    <Drawer anchor="right" open={open} onClose={onClose}>
      <Box
        sx={{
          width: 300,
          p: 3,
          display: "flex",
          flexDirection: "column",
          gap: 2,
        }}
        role="presentation"
      >
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 2,
          }}
        >
          <Typography variant="h6">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏</Typography>
          <IconButton onClick={onClose}>
            <CloseIcon />
          </IconButton>
        </Box>

        <TextField
          label="–ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É"
          type="color"
          value={buttonConfig.backgroundColor}
          onChange={handleColorChange}
          fullWidth
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">üé®</InputAdornment>
            ),
          }}
        />

        <TextField
          label="–ö–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É"
          type="color"
          value={buttonConfig.textColor}
          onChange={handleTextColorChange}
          fullWidth
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">üÖ∞Ô∏è</InputAdornment>
            ),
          }}
        />

        <TextField
          label="–ö–æ–ª—ñ—Ä –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ"
          type="color"
          value={buttonConfig.hoverColor}
          onChange={handleHoverColorChange}
          fullWidth
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">üëÜ</InputAdornment>
            ),
          }}
        />

        <Typography gutterBottom>–†–∞–¥—ñ—É—Å –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è (px)</Typography>
        <Slider
          value={parseFloat(buttonConfig.borderRadius)}
          onChange={handleBorderRadiusChange}
          aria-labelledby="border-radius-slider"
          valueLabelDisplay="auto"
          min={0}
          max={50}
        />

        <TextField
          label="–í—ñ–¥—Å—Ç—É–ø–∏ (Padding)"
          value={buttonConfig.padding}
          onChange={handlePaddingChange}
          placeholder="–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 6px 16px"
          fullWidth
        />

        <Typography gutterBottom>–†–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É (rem)</Typography>
        <Slider
          value={parseFloat(buttonConfig.fontSize)}
          onChange={handleFontSizeChange}
          aria-labelledby="font-size-slider"
          valueLabelDisplay="auto"
          min={0.5}
          max={2.0}
          step={0.05}
        />

        <TextField
          label="–¢—ñ–Ω—å (Box-shadow)"
          value={buttonConfig.boxShadow}
          onChange={handleBoxShadowChange}
          placeholder="–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 0px 3px 5px rgba(0,0,0,0.2)"
          fullWidth
          multiline
          rows={2}
        />
      </Box>
    </Drawer>
  );
};

export default ThemeSettingsPanel;
